import React, { useState, useEffect, useRef } from 'react';
import ChatMessage from '@/components/ChatMessage';
import ChatInput from '@/components/ChatInput';
import { getBotResponse, sendMessageToBackend } from '@/utils/chatUtils';
import { Sidebar, SidebarProvider, SidebarTrigger } from '@/components/ui/sidebar';
import AppSidebar from '@/components/AppSidebar';
import ThemeToggle from '@/components/ThemeToggle';
import { ThemeProvider } from '@/components/ThemeProvider';
import { useAuth } from '@/contexts/AuthContext';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { ProfileForm } from '@/components/profile/ProfileForm';
import { toast } from 'sonner';
import { useNavigate } from 'react-router-dom';
import { LoadingSpinner } from '@/components/common/LoadingSpinner';
import { ProfileFormValues } from '@/components/profile/ProfileFormTypes';
import SubscriptionTab from '@/components/SubscriptionTab';
import ChatArchive from '@/components/ChatArchive';
import { Button } from '@/components/ui/button';
import { CreditCard } from 'lucide-react';
import { useIsMobile } from '@/hooks/use-mobile';

interface Message {
  id: string;
  content: string;
  isBot: boolean;
}

const Index = () => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [isTyping, setIsTyping] = useState(false);
  const [showProfile, setShowProfile] = useState(false);
  const [showSubscription, setShowSubscription] = useState(false);
  const [showArchive, setShowArchive] = useState(false);
  const [isUpdating, setIsUpdating] = useState(false);
  const [welcomeShown, setWelcomeShown] = useState(false);
  const [isProcessingRequest, setIsProcessingRequest] = useState(false);
  
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const isMobile = useIsMobile();
  
  const {
    user,
    profile,
    loading,
    updateProfile,
    profileLoading,
    hasActiveSubscription,
    remainingRequests,
    useRequest
  } = useAuth();
  
  const navigate = useNavigate();
  
  const toggleShowProfile = (show: boolean) => {
    setShowProfile(show);
  };

  const toggleShowSubscription = (show: boolean) => {
    setShowSubscription(show);
  };

  const toggleShowArchive = (show: boolean) => {
    setShowArchive(show);
  };

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({
      behavior: 'smooth'
    });
  }, [messages]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤–æ –≤–∫–ª–∞–¥–∫–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
  useEffect(() => {
    if (!showProfile && !showSubscription && !showArchive && !welcomeShown && user) {
      const timer = setTimeout(() => {
        addBotMessage("–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é –≤ —É–Ω–∏–≤–µ—Ä. –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç ‚Äî –¥–æ–∫—É–º–µ–Ω—Ç—ã, —ç–∫–∑–∞–º–µ–Ω—ã, —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã? –ü–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å —Å–æ –≤—Å–µ–º, —á—Ç–æ —Ç–µ–±—è –≤–æ–ª–Ω—É–µ—Ç! üòä");
        setWelcomeShown(true);
      }, 1000);
      return () => clearTimeout(timer);
    }
  }, [showProfile, showSubscription, showArchive, welcomeShown, user]);

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–∞—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
  useEffect(() => {
    if (!showProfile && !showSubscription && !showArchive) {
      setMessages([]);
      setWelcomeShown(false);
    }
  }, [showProfile, showSubscription, showArchive]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –ø—Ä–æ—Ñ–∏–ª—è
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –ø—Ä–æ—Ñ–∏–ª—è
    if (user && profile) {
      const isMissingData = !profile.user_type || !profile.phone || !profile.school || !profile.referral_source;
      if (isMissingData && !showProfile) {
        setShowProfile(true);
        toast.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è");
      }
    }
  }, [user, profile, showProfile]);
  
  const addUserMessage = async (content: string) => {
    if (!user || isProcessingRequest) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å
    if (!useRequest()) {
      return;
    }
    
    setIsProcessingRequest(true);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    const userMessage = {
      id: Date.now().toString(),
      content,
      isBot: false
    };
    
    setMessages(prev => [...prev, userMessage]);
    
    await handleUserMessage(content);
    setIsProcessingRequest(false);
  };
  
  const addBotMessage = async (content: string) => {
    if (!user) return;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    const botMessage = {
      id: Date.now().toString(),
      content,
      isBot: true
    };
    
    setMessages(prev => [...prev, botMessage]);
  };
  
  const handleUserMessage = async (message: string) => {
    if (!user) {
      console.error("User not authenticated");
      return;
    }

    setIsTyping(true);
    
    try {
      const response = await sendMessageToBackend(message, user.id);
      addBotMessage(response);
    } catch (error) {
      console.error("Error getting response from backend:", error);
      try {
        const fallbackResponse = await getBotResponse(message, user.id);
        addBotMessage(fallbackResponse.text);
      } catch (fallbackError) {
        console.error("Fallback response also failed:", fallbackError);
        addBotMessage("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
      }
    } finally {
      setIsTyping(false);
    }
  };
  
  const handleProfileUpdate = async (data: ProfileFormValues) => {
    setIsUpdating(true);
    try {
      const success = await updateProfile(data);
      if (!success) {
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å");
      }
    } catch (error: any) {
      toast.error(error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è");
    } finally {
      setIsUpdating(false);
    }
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
  if (loading || profileLoading) {
    return <LoadingSpinner />;
  }

  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  if (!user) {
    navigate('/login');
    return null;
  }

  // Check if mandatory profile fields are missing
  const isMissingRequiredProfileData = profile && (!profile.user_type || !profile.phone || !profile.school || !profile.referral_source);
  
  return <ThemeProvider attribute="class" defaultTheme="light">
      <SidebarProvider>
        <div className="flex min-h-screen w-full">
          {/* –ü–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É */}
          <div className="fixed top-4 left-4 z-50 flex items-center gap-2 bg-white/80 dark:bg-slate-800/80 rounded-md shadow-sm p-1 px-[2px]">
            <SidebarTrigger className="h-9 w-9 hover:bg-slate-100 dark:hover:bg-slate-700 dark:text-white" />
            <ThemeToggle />
          </div>
          
          <AppSidebar 
            onShowProfile={toggleShowProfile} 
            showingProfile={showProfile} 
            onShowSubscription={toggleShowSubscription}
            showingSubscription={showSubscription}
            onShowArchive={toggleShowArchive}
            showingArchive={showArchive}
          />
          
          <div className="flex-1 flex flex-col min-h-screen bg-slate-50 dark:bg-slate-900">
            <div className={`flex-1 flex flex-col ${isMobile ? 'w-full' : 'w-[80%]'} mx-auto p-4 pt-14`}>
              {showProfile || isMissingRequiredProfileData ? (
                <div className="flex-1 flex flex-col">
                  <h1 className="mb-6 text-2xl font-bold">–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h1>
                  
                  <Card className="p-6 shadow-sm">
                    <CardHeader>
                      <CardTitle>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</CardTitle>
                      {isMissingRequiredProfileData && (
                        <p className="text-orange-500 font-medium mt-2">
                          –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                        </p>
                      )}
                    </CardHeader>
                    
                    <CardContent>
                      <ProfileForm profile={profile} onSubmit={handleProfileUpdate} isLoading={isUpdating} />
                    </CardContent>
                  </Card>
                </div>
              ) : showSubscription ? (
                <SubscriptionTab />
              ) : showArchive ? (
                <ChatArchive />
              ) : (
                <div className="flex-1 flex flex-col overflow-hidden">
                  {!hasActiveSubscription && (
                    <Card className="mb-6 border-orange-300 bg-orange-50 dark:bg-orange-900/20">
                      <CardContent className={`p-4 ${isMobile ? 'flex flex-col' : 'flex items-center justify-between'}`}>
                        <div className={isMobile ? 'mb-3' : ''}>
                          <h3 className="font-semibold text-orange-800 dark:text-orange-300 mb-1">
                            –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º: {remainingRequests} –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ 5
                          </h3>
                          <p className="text-sm text-orange-700 dark:text-orange-400">
                            –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ 50 –∑–∞–ø—Ä–æ—Å–∞–º –≤ –º–µ—Å—è—Ü –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
                          </p>
                        </div>
                        <Button 
                          variant="default" 
                          className="bg-orange-500 hover:bg-orange-600 text-white w-full sm:w-auto" 
                          onClick={() => setShowSubscription(true)}
                        >
                          <CreditCard className="w-4 h-4 mr-2" />
                          –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
                        </Button>
                      </CardContent>
                    </Card>
                  )}
                  
                  {hasActiveSubscription && remainingRequests <= 10 && (
                    <Card className="mb-6 border-yellow-300 bg-yellow-50 dark:bg-yellow-900/20">
                      <CardContent className="p-4">
                        <p className="text-sm text-yellow-700 dark:text-yellow-400">
                          <span className="font-semibold">–í–Ω–∏–º–∞–Ω–∏–µ!</span> –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {remainingRequests} –∑–∞–ø—Ä–æ—Å–æ–≤. 
                          –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.
                        </p>
                      </CardContent>
                    </Card>
                  )}
                  
                  <div className="flex-1 overflow-y-auto p-2 space-y-4">
                    {messages.map(message => (
                      <ChatMessage key={message.id} content={message.content} isBot={message.isBot} animate={true} />
                    ))}
                    
                    {isTyping && (
                      <div className="chat-message chat-message-bot">
                        <div className="typing-indicator">
                          <div className="flex items-center">
                            <span className="typing-dot typing-dot-1"></span>
                            <span className="typing-dot typing-dot-2"></span>
                            <span className="typing-dot typing-dot-3"></span>
                            <span className="typing-text dark:text-gray-300">–ü–µ—á–∞—Ç–∞–µ—Ç...</span>
                          </div>
                        </div>
                      </div>
                    )}
                    
                    <div ref={messagesEndRef} />
                  </div>
                  
                  <div className="p-2 pt-4">
                    <ChatInput onSend={addUserMessage} disabled={isTyping} />
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </SidebarProvider>
    </ThemeProvider>;
};

export default Index;
