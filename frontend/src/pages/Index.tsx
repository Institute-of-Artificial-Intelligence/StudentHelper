import React, { useState, useEffect, useRef } from 'react';
import ChatMessage from '@/components/ChatMessage';
import ChatInput from '@/components/ChatInput';
import UniversityLogo from '@/components/UniversityLogo';
import { getBotResponse, sendMessageToBackend } from '@/utils/chatUtils';
import { Card } from '@/components/ui/card';
import { Book, Calendar, Search } from 'lucide-react';

interface Message {
  id: string;
  content: string;
  isBot: boolean;
}

const Index = () => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [isTyping, setIsTyping] = useState(false);
  const [showWelcome, setShowWelcome] = useState(true);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  useEffect(() => {
    const timer = setTimeout(() => {
      addBotMessage("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é –≤ —É–Ω–∏–≤–µ—Ä. –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç ‚Äî –¥–æ–∫—É–º–µ–Ω—Ç—ã, —ç–∫–∑–∞–º–µ–Ω—ã, —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã? –ü–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å —Å–æ –≤—Å–µ–º, —á—Ç–æ —Ç–µ–±—è –≤–æ–ª–Ω—É–µ—Ç! üòä");
    }, 1000);
    
    return () => clearTimeout(timer);
  }, []);

  const addUserMessage = (content: string) => {
    setMessages(prev => [
      ...prev,
      { id: Date.now().toString(), content, isBot: false }
    ]);
    handleUserMessage(content);
  };

  const addBotMessage = (content: string) => {
    setMessages(prev => [
      ...prev,
      { id: Date.now().toString(), content, isBot: true }
    ]);
  };

  const handleUserMessage = (message: string) => {
    setIsTyping(true);
    
    sendMessageToBackend(message)
      .then(response => {
        addBotMessage(response);
        setIsTyping(false);
      })
      .catch(error => {
        console.error("Error getting response from backend:", error);
        const fallbackResponse = getBotResponse(message);
        addBotMessage(fallbackResponse.text);
        setIsTyping(false);
      });
  };

  const handleStartChat = () => {
    setShowWelcome(false);
  };

  if (showWelcome) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-edu-pattern">
        <Card className="max-w-3xl w-full p-8 shadow-lg bg-white/95 backdrop-blur-sm">
          <div className="mb-6 flex flex-col items-center">
            <UniversityLogo />
            <h1 className="text-3xl font-bold text-edu-primary mt-4">–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞</h1>
            <p className="text-edu-dark/70 mt-2">–í–∞—à –≥–∏–¥ –≤ –º–∏—Ä–µ –≤—ã—Å—à–µ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è</p>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            <div className="bg-edu-light p-5 rounded-lg shadow-sm flex flex-col items-center text-center">
              <Search className="text-edu-secondary mb-2" size={28} />
              <h3 className="font-medium text-edu-primary">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏</h3>
              <p className="text-sm text-edu-dark/70 mt-1">–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è</p>
            </div>
            
            <div className="bg-edu-light p-5 rounded-lg shadow-sm flex flex-col items-center text-center">
              <Calendar className="text-edu-secondary mb-2" size={28} />
              <h3 className="font-medium text-edu-primary">–í–∞–∂–Ω—ã–µ –¥–∞—Ç—ã</h3>
              <p className="text-sm text-edu-dark/70 mt-1">–°—Ä–æ–∫–∏ –ø–æ–¥–∞—á–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è</p>
            </div>
            
            <div className="bg-edu-light p-5 rounded-lg shadow-sm flex flex-col items-center text-center">
              <Book className="text-edu-secondary mb-2" size={28} />
              <h3 className="font-medium text-edu-primary">–ü—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è</h3>
              <p className="text-sm text-edu-dark/70 mt-1">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞—Ö –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è—Ö</p>
            </div>
          </div>
          
          <button 
            onClick={handleStartChat} 
            className="w-full py-3 bg-edu-secondary text-white rounded-lg hover:bg-edu-secondary/90 transition-colors font-medium animate-pulse-slow"
          >
            –ù–∞—á–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
          </button>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen flex flex-col bg-edu-pattern">
      <header className="bg-edu-primary text-white py-3 px-6 shadow-md">
        <div className="flex items-center w-[75%] mx-auto">
          <UniversityLogo />
          <div className="ml-3">
            <h1 className="font-bold">–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞</h1>
            <p className="text-xs opacity-80">–û–Ω–ª–∞–π–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è</p>
          </div>
        </div>
      </header>
      
      <div className="flex-1 flex flex-col w-[75%] mx-auto p-4">
        <Card className="flex-1 flex flex-col bg-white/95 backdrop-blur-sm shadow-lg">
          <div className="flex-1 overflow-y-auto p-4">
            {messages.map(message => (
              <ChatMessage 
                key={message.id} 
                content={message.content} 
                isBot={message.isBot}
                animate={true}
              />
            ))}
            
            {isTyping && (
              <div className="chat-message chat-message-bot">
                <div className="typing-indicator">
                  <div className="flex items-center">
                    <span className="typing-dot typing-dot-1"></span>
                    <span className="typing-dot typing-dot-2"></span>
                    <span className="typing-dot typing-dot-3"></span>
                    <span className="typing-text">–ü–µ—á–∞—Ç–∞–µ—Ç...</span>
                  </div>
                </div>
              </div>
            )}
            
            <div ref={messagesEndRef} />
          </div>
          
          <div className="p-4 border-t border-gray-100">
            <ChatInput onSend={addUserMessage} disabled={isTyping} />
          </div>
        </Card>
      </div>
    </div>
  );
};

export default Index;
